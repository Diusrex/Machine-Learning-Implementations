from abc import ABC, abstractmethod

# Note: I don't think that this class should be left in this directory over time.
# But is reasonable to leave it here for now.
class Estimator(ABC):
    """
    Class to estimate the reward from a given action.
    
    Note that it currently assumes that there is only a SINGLE state!
    """
    
    @abstractmethod
    def estimate(self, action):
        """
        Return expected return for the action.
        """
        pass
        
    
    @abstractmethod
    def update(self, action, reward, count=1):
        """
        Updates the expected return for the provided action, assuming reward-action
        was provided count times.
        """
        pass
    
    @abstractmethod
    def reset(self):
        """
        Clears the state of the estimator.
        """
        pass
    
class AverageEstimator(Estimator):
    """
    Simple estimator that assumes each action is drawn from a stationary distribution.
    
    Gives a high default expected for each action to ensure they are selected once.
    """
    def __init__(self, default_expected=100):
        self._default_expected = default_expected
        # Will be [reward, count]
        self._action_info = {}
    
    def estimate(self, action):
        """
        Able to handle new or current actions
        """
        if action not in self._action_info:
            return self._default_expected
        
        info = self._action_info[action]
        return info[0] / info[1]
            
    def update(self, action, reward, count=1):
        if action not in self._action_info:
            self._action_info[action] = [count * reward, count]
        else:
            info = self._action_info[action]
            info[0] += count * reward
            info[1] += count
            
    def reset(self):
        self._action_info = {}
